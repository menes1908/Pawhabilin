/*
 Offline Html5Qrcode-compatible shim using the Native BarcodeDetector API.
 - Provides a minimal subset of Html5Qrcode API used by admin.php
 - Works fully offline with no external downloads on browsers that support BarcodeDetector
 - If BarcodeDetector is not available, this file intentionally does NOT define Html5Qrcode,
   allowing the pageâ€™s dynamic CDN fallback loader to fetch the real library at click time.

 Exposed API (subset):
   new Html5Qrcode(elementId)
   .start(cameraIdOrConfig, config, onSuccess, onFailure)
   .stop()
   .clear()
   Html5Qrcode.getCameras()

 Supported config keys: { fps?: number, qrbox?: number | { width:number, height:number } }
*/
(function(global){
  try {
    if (!('BarcodeDetector' in global) || (Array.isArray(BarcodeDetector?.getSupportedFormats) && BarcodeDetector.getSupportedFormats && typeof BarcodeDetector.getSupportedFormats === 'function' && Array.isArray(BarcodeDetector.getSupportedFormats()) && BarcodeDetector.getSupportedFormats().indexOf('qr_code') === -1)) {
      // No native support: leave Html5Qrcode undefined so CDN fallback can load the real lib.
      return;
    }
  } catch (e) {
    // If anything goes wrong determining support, do not define the shim.
    return;
  }

  if (global.Html5Qrcode) return; // Respect existing definition if present

  // Utilities
  function isObject(x){ return x && typeof x === 'object'; }
  function pickQrboxSize(qrbox){
    if (!qrbox) return null;
    if (typeof qrbox === 'number') return { width: qrbox, height: qrbox };
    if (isObject(qrbox) && typeof qrbox.width === 'number' && typeof qrbox.height === 'number') return { width: qrbox.width, height: qrbox.height };
    return null;
  }
  function constraintFrom(cameraIdOrConfig){
    if (typeof cameraIdOrConfig === 'string') {
      return { video: { deviceId: { exact: cameraIdOrConfig } }, audio: false };
    }
    if (isObject(cameraIdOrConfig)){
      // Accept { deviceId } or { facingMode }
      if (typeof cameraIdOrConfig.deviceId === 'string') return { video: { deviceId: { exact: cameraIdOrConfig.deviceId } }, audio:false };
      if (isObject(cameraIdOrConfig.deviceId) && cameraIdOrConfig.deviceId.exact) return { video: { deviceId: { exact: cameraIdOrConfig.deviceId.exact } }, audio:false };
      if (cameraIdOrConfig.facingMode) return { video: { facingMode: cameraIdOrConfig.facingMode }, audio:false };
    }
    // Default to environment-facing when possible
    return { video: { facingMode: { ideal: 'environment' } }, audio:false };
  }

  // Shim implementation
  function Html5Qrcode(elementId){
    if (!(this instanceof Html5Qrcode)) return new Html5Qrcode(elementId);
    var el = document.getElementById(elementId);
    if (!el) throw new Error('Html5Qrcode: element not found: #' + elementId);
    this._container = el;
    this._video = null;
    this._canvas = null; // for optional cropping
    this._ctx = null;
    this._detector = new BarcodeDetector({ formats: ['qr_code'] });
    this._stream = null;
    this._running = false;
    this._loopHandle = 0;
    this._lastText = null;
    this._onSuccess = null;
    this._onFailure = null;
    this._fpsIntervalMs = 100; // default ~10fps
    this._qrbox = null;
    // Prepare container
    el.innerHTML = '';
    el.style.position = el.style.position || 'relative';
  }

  Html5Qrcode.prototype.start = function(cameraIdOrConfig, config, onSuccess, onFailure){
    var self = this;
    if (self._running) return Promise.resolve();
    self._onSuccess = typeof onSuccess === 'function' ? onSuccess : function(){};
    self._onFailure = typeof onFailure === 'function' ? onFailure : function(){};
    config = isObject(config) ? config : {};
    self._fpsIntervalMs = Math.max(20, Math.floor(1000 / (Number(config.fps) > 0 ? Number(config.fps) : 10)));
    self._qrbox = pickQrboxSize(config.qrbox);

    // Create video element
    var video = document.createElement('video');
    video.setAttribute('autoplay','true');
    video.setAttribute('muted','true');
    video.setAttribute('playsinline','true');
    video.style.width = '100%';
    video.style.height = 'auto';
    self._container.appendChild(video);
    self._video = video;

    // Optional canvas for cropping
    if (self._qrbox){
      self._canvas = document.createElement('canvas');
      self._ctx = self._canvas.getContext('2d', { willReadFrequently: true });
    }

    var constraints = constraintFrom(cameraIdOrConfig);
    return navigator.mediaDevices.getUserMedia(constraints).then(function(stream){
      self._stream = stream;
      try { video.srcObject = stream; } catch (_) { video.src = URL.createObjectURL(stream); }
      return new Promise(function(res){
        var onCanPlay = function(){
          video.removeEventListener('canplay', onCanPlay);
          // Adjust canvas size for qrbox
          if (self._qrbox && self._canvas && self._ctx){
            var box = self._qrbox;
            self._canvas.width = box.width;
            self._canvas.height = box.height;
          }
          self._running = true;
          self._scanLoop();
          res();
        };
        video.addEventListener('canplay', onCanPlay);
      });
    });
  };

  Html5Qrcode.prototype._scanLoop = function(){
    var self = this;
    if (!self._running) return;
    var t0 = performance.now();
    var doDetect = function(){
      if (!self._running) return;
      var source = self._video;
      if (!source || source.readyState < 2) return scheduleNext();

      if (self._qrbox && self._canvas && self._ctx){
        // Center crop from video frame into canvas
        var vw = source.videoWidth, vh = source.videoHeight;
        var bw = self._canvas.width, bh = self._canvas.height;
        var sx = Math.max(0, Math.floor((vw - bw) / 2));
        var sy = Math.max(0, Math.floor((vh - bh) / 2));
        self._ctx.drawImage(source, sx, sy, bw, bh, 0, 0, bw, bh);
        source = self._canvas; // detect on cropped canvas
      }
      self._detector.detect(source).then(function(barcodes){
        if (barcodes && barcodes.length){
          var code = null;
          for (var i=0;i<barcodes.length;i++){
            if (barcodes[i] && (barcodes[i].format === 'qr_code' || barcodes[i].rawValue)){
              code = barcodes[i].rawValue || '';
              break;
            }
          }
          if (code && code !== self._lastText){
            self._lastText = code;
            try { self._onSuccess(code, null); } catch(_){}
          }
        } else {
          // Frequent decode failures are normal; throttle callback
          try { self._onFailure('NotFound'); } catch(_){}
        }
        scheduleNext();
      }).catch(function(err){
        try { self._onFailure(err && err.message ? err.message : 'DecodeError'); } catch(_){}
        scheduleNext();
      });
    };
    var scheduleNext = function(){
      var elapsed = performance.now() - t0;
      var delay = Math.max(0, self._fpsIntervalMs - elapsed);
      self._loopHandle = global.setTimeout(doDetect, delay);
    };
    doDetect();
  };

  Html5Qrcode.prototype.stop = function(){
    var self = this;
    if (!self._running && !self._stream) return Promise.resolve();
    self._running = false;
    if (self._loopHandle){ try { clearTimeout(self._loopHandle); } catch(_){} self._loopHandle = 0; }
    return new Promise(function(res){
      try {
        if (self._video){ self._video.pause(); self._video.srcObject = null; }
      } catch(_){}
      try {
        if (self._stream){ self._stream.getTracks().forEach(function(t){ try{ t.stop(); }catch(_){}}); }
      } catch(_){}
      res();
    });
  };

  Html5Qrcode.prototype.clear = function(){
    var el = this._container;
    if (el){ el.innerHTML = ''; }
    this._video = null; this._canvas = null; this._ctx = null; this._lastText = null;
  };

  Html5Qrcode.getCameras = function(){
    return navigator.mediaDevices.enumerateDevices().then(function(devices){
      var cams = [];
      for (var i=0;i<devices.length;i++){
        var d = devices[i];
        if (d.kind === 'videoinput') cams.push({ id: d.deviceId, label: d.label || 'Camera ' + (cams.length+1) });
      }
      return cams;
    });
  };

  // Expose
  global.Html5Qrcode = Html5Qrcode;
})(typeof window !== 'undefined' ? window : this);
